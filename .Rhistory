shade( apply(GS_sim, 2, PI), xseq,col = col.alpha("gray",0.003))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2,lty=2, col = col.alpha("black",0.8))
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
plot(NULL,type = "l", ylim= c(-3,3),xlim=c(-2.5,2.5),
xlab = "Standardized Myelin", ylab = "Standardized GSCORR", main = "Total Effect of MY on GSCORR",sub= "Counterfactual Plot")
for (s in 1:n_subj) {
ACW_sim <- with(post, sapply(1:100, function(i) rnorm(1e3,
ac_subj_nonself[,s] + bc_subj_nonself[,s]*xseq[i],
sigma_2 )
))
#lines(xseq, y = colMeans(ACW_sim))
#shade( apply(ACW_sim, 2, PI), xseq)
GS_sim <- with(post, sapply(1:100, function(i) rnorm(1e3,
a_subj_nonself[,s] + b_subj_nonself[,s] * xseq[i] +
c_subj_nonself[,s] * ACW_sim[,i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim), col=col.alpha(colors[2],0.1))
# shade( apply(GS_sim, 2, PI), xseq,col = col.alpha("gray",0.003))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2, col = col.alpha("black",0.8))
#=+=+=+=+=+=+=+=+ S E L F =+=+=+=+=+=+=+=+=+=+ #
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
for (s in 1:n_subj) {
ACW_sim <- with(post, sapply(1:100, function(i) rnorm(1e3,
ac_subj_self[,s] + bc_subj_self[,s]*xseq[i],
sigma_2 )
))
#lines(xseq, y = colMeans(ACW_sim))
#shade( apply(ACW_sim, 2, PI), xseq)
GS_sim <- with(post, sapply(1:100, function(i) rnorm(1e3,
a_subj_self[,s] + b_subj_self[,s] * xseq[i] +
c_subj_self[,s] * ACW_sim[,i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim), col=col.alpha(colors[1],0.1))
# shade( apply(GS_sim, 2, PI), xseq,col = col.alpha("gray",0.003))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2,lty=2, col = col.alpha("black",0.8))
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
plot(NULL,type = "l", ylim= c(-3,3),xlim=c(-2.5,2.5),
xlab = "Standardized ACW", ylab = "Standardized GSCORR", main = "Counterfacted relationship")
for (s in 1:n_subj) {
GS_sim <- with(post,sapply(1:100, function(i) rnorm(1e3, a_subj_nonself[,s] +
b_subj_nonself[,s] * 0 +
c_subj_nonself[,s] * xseq[i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim),col=col.alpha(colors[1],0.4))
#  shade( apply(GS_sim, 2, PI), xseq,col = col.alpha(colors[1],0.05))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2, col = col.alpha(colors[1],0.8))
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
plot(NULL,type = "l", ylim= c(-3,3),xlim=c(-2.5,2.5),
xlab = "Standardized ACW", ylab = "Standardized GSCORR", main = "Counterfacted relationship")
for (s in 1:n_subj) {
GS_sim <- with(post,sapply(1:100, function(i) rnorm(1e3, a_subj_nonself[,s] +
b_subj_nonself[,s] * 0 +
c_subj_nonself[,s] * xseq[i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim),col=col.alpha(colors[1],0.1))
#  shade( apply(GS_sim, 2, PI), xseq,col = col.alpha(colors[1],0.05))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2, col = col.alpha("black",0.8))
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
for (s in 1:n_subj) {
GS_sim <- with(post,sapply(1:100, function(i) rnorm(1e3, a_subj_self[,s] +
b_subj_self[,s] * 0 +
c_subj_self[,s] * xseq[i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim),col=col.alpha(colors[2],0.1))
#shade( apply(GS_sim, 2, PI), xseq,col = col.alpha(colors[2],0.05))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2,lty=2, col = col.alpha("black",0.8))
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
plot(NULL,type = "l", ylim= c(-3,3),xlim=c(-2.5,2.5),
xlab = "Standardized ACW", ylab = "Standardized GSCORR", main = "Counterfacted relationship")
for (s in 1:n_subj) {
GS_sim <- with(post,sapply(1:100, function(i) rnorm(1e3, a_subj_nonself[,s] +
b_subj_nonself[,s] * 0 +
c_subj_nonself[,s] * xseq[i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim),col=col.alpha(colors[1],0.1))
#  shade( apply(GS_sim, 2, PI), xseq,col = col.alpha(colors[1],0.05))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2, col = col.alpha("black",0.8))
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
plot(NULL,type = "l", ylim= c(-3,3),xlim=c(-2.5,2.5),
xlab = "Standardized ACW", ylab = "Standardized GSCORR", main = "Counterfacted relationship")
for (s in 1:n_subj) {
GS_sim <- with(post,sapply(1:100, function(i) rnorm(1e3, a_subj_nonself[,s] +
b_subj_nonself[,s] * 0 +
c_subj_nonself[,s] * xseq[i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim),col=col.alpha(colors[2],0.1))
#  shade( apply(GS_sim, 2, PI), xseq,col = col.alpha(colors[2],0.05))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2, col = col.alpha("black",0.8))
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
for (s in 1:n_subj) {
GS_sim <- with(post,sapply(1:100, function(i) rnorm(1e3, a_subj_self[,s] +
b_subj_self[,s] * 0 +
c_subj_self[,s] * xseq[i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim),col=col.alpha(colors[1],0.1))
#shade( apply(GS_sim, 2, PI), xseq,col = col.alpha(colors[1],0.05))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2,lty=2, col = col.alpha("black",0.8))
# Adding legend
legend("topright",               # Position of the legend
legend = c("Self", "Non-self"), # Text in the legend
col = c("red", "blue"),   # Colors of the lines in the legend
lty = c(1, 2),            # Line types
cex = 0.8)                # Font size of the legend text
# Adding legend
legend("topright",               # Position of the legend
legend = c("Self", "Non-self"), # Text in the legend
col = c("red", "blue"),   # Colors of the lines in the legend
lty = c(1, 2),            # Line types
cex = 2)                # Font size of the legend text
legend("topright",               # Position of the legend
legend = c("Self", "Non-self"), # Text in the legend
col = c("red", "blue"),   # Colors of the lines in the legend
lty = c(1, 2),            # Line types
cex = 1.5)                # Font size of the legend text
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
plot(NULL,type = "l", ylim= c(-3,3),xlim=c(-2.5,2.5),
xlab = "Standardized ACW", ylab = "Standardized GSCORR", main = "Counterfacted relationship")
for (s in 1:n_subj) {
GS_sim <- with(post,sapply(1:100, function(i) rnorm(1e3, a_subj_nonself[,s] +
b_subj_nonself[,s] * 0 +
c_subj_nonself[,s] * xseq[i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim),col=col.alpha(colors[2],0.1))
#  shade( apply(GS_sim, 2, PI), xseq,col = col.alpha(colors[2],0.05))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2, col = col.alpha("black",0.8))
#=+=+=+=+=+=+=+=+ S E L F =+=+=+=+=+=+=+=+=+=+ #
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
for (s in 1:n_subj) {
GS_sim <- with(post,sapply(1:100, function(i) rnorm(1e3, a_subj_self[,s] +
b_subj_self[,s] * 0 +
c_subj_self[,s] * xseq[i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim),col=col.alpha(colors[1],0.1))
#shade( apply(GS_sim, 2, PI), xseq,col = col.alpha(colors[1],0.05))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2,lty=2, col = col.alpha("black",0.8))
# Adding legend
legend("topright",               # Position of the legend
legend = c("Self", "Non-self"), # Text in the legend
col = c("red", "blue"),   # Colors of the lines in the legend
lty = c(1, 2),            # Line types
cex = 1.5)                # Font size of the legend text
install(dagitty)
library(dagitty)
# Define the DAG
dag <- dagitty("dag {
ACW -> MY
}")
# Plot the DAG
plot(dag)
linear <- dagitty( "dag{
Myelin -> ACW }" )
coordinates(linear) <- list( x=c(Myelin=0,ACW=2) , y=c(Myelin=0.5,ACW=0.5) )
drawdag(linear,cex=3, lwd = 2,shapes = c("c","c"),radius = 5,goodarrow = TRUE)
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
plot(NULL,type = "l", ylim= c(-3,3),xlim=c(-2.5,2.5),
xlab = "Standardized ACW", ylab = "Standardized GSCORR", main = "Counterfacted relationship")
for (s in 1:n_subj) {
GS_sim <- with(post,sapply(1:100, function(i) rnorm(1e3, a_subj_nonself[,s] +
b_subj_nonself[,s] * 0 +
c_subj_nonself[,s] * xseq[i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim),col=col.alpha(colors[2],0.1))
#  shade( apply(GS_sim, 2, PI), xseq,col = col.alpha(colors[2],0.05))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2, col = col.alpha("black",0.8))
#=+=+=+=+=+=+=+=+ S E L F =+=+=+=+=+=+=+=+=+=+ #
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
for (s in 1:n_subj) {
GS_sim <- with(post,sapply(1:100, function(i) rnorm(1e3, a_subj_self[,s] +
b_subj_self[,s] * 0 +
c_subj_self[,s] * xseq[i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim),col=col.alpha(colors[1],0.1))
#shade( apply(GS_sim, 2, PI), xseq,col = col.alpha(colors[1],0.05))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2,lty=2, col = col.alpha("black",0.8))
# Adding legend
legend("topright",               # Position of the legend
legend = c("Self", "Non-self"), # Text in the legend
col = c("red", "blue"),   # Colors of the lines in the legend
lty = c(2, 1),            # Line types
cex = 1.5)                # Font size of the legend text
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
plot(NULL,type = "l", ylim= c(-3,3),xlim=c(-2.5,2.5),
xlab = "Standardized ACW", ylab = "Standardized GSCORR", main = "Counterfacted relationship")
for (s in 1:n_subj) {
GS_sim <- with(post,sapply(1:100, function(i) rnorm(1e3, a_subj_nonself[,s] +
b_subj_nonself[,s] * 0 +
c_subj_nonself[,s] * xseq[i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim),col=col.alpha(colors[2],0.1))
#  shade( apply(GS_sim, 2, PI), xseq,col = col.alpha(colors[2],0.05))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2, col = col.alpha("black",0.8))
#=+=+=+=+=+=+=+=+ S E L F =+=+=+=+=+=+=+=+=+=+ #
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
for (s in 1:n_subj) {
GS_sim <- with(post,sapply(1:100, function(i) rnorm(1e3, a_subj_self[,s] +
b_subj_self[,s] * 0 +
c_subj_self[,s] * xseq[i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim),col=col.alpha(colors[1],0.1))
#shade( apply(GS_sim, 2, PI), xseq,col = col.alpha(colors[1],0.05))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2,lty=2, col = col.alpha("black",0.8))
# Adding legend
legend("topright",               # Position of the legend
legend = c("Self", "Non-self"), # Text in the legend
col = c("red", "blue"),   # Colors of the lines in the legend
lty = c(2, 1),            # Line types
cex = 1.5)                # Font size of the legend text
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
plot(NULL,type = "l", ylim= c(-3,3),xlim=c(-2.5,2.5),
xlab = "Standardized ACW", ylab = "Standardized GSCORR", main = "Counterfacted relationship")
for (s in 1:n_subj) {
GS_sim <- with(post,sapply(1:100, function(i) rnorm(1e3, a_subj_nonself[,s] +
b_subj_nonself[,s] * 0 +
c_subj_nonself[,s] * xseq[i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim),col=col.alpha(colors[2],0.1))
#  shade( apply(GS_sim, 2, PI), xseq,col = col.alpha(colors[2],0.05))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2, col = col.alpha("black",0.8))
#=+=+=+=+=+=+=+=+ S E L F =+=+=+=+=+=+=+=+=+=+ #
colMeanPlot <- matrix(NA, ncol = n_subj, nrow = length(xseq))
for (s in 1:n_subj) {
GS_sim <- with(post,sapply(1:100, function(i) rnorm(1e3, a_subj_self[,s] +
b_subj_self[,s] * 0 +
c_subj_self[,s] * xseq[i],
sigma)) )
colMeanPlot[,s] = colMeans(GS_sim)
lines(xseq, y = colMeans(GS_sim),col=col.alpha(colors[1],0.1))
#shade( apply(GS_sim, 2, PI), xseq,col = col.alpha(colors[1],0.05))
}
lines(xseq, y = rowMeans(colMeanPlot), lwd=2,lty=2, col = col.alpha("black",0.8))
# Adding legend
legend("topright",               # Position of the legend
legend = c("Self", "Non-self"), # Text in the legend
col = c("red", "blue"),   # Colors of the lines in the legend
lty = c(2, 1),            # Line types
cex = 1.5)                # Font size of the legend text
library(R.matlab)
library(rstatix)
test <- readMat("/home/kaansocat/DATA/MED.mat")
test <- readMat("/home/kaansocat/DATA/MED.mat")
test <- readMat("/home/kaansocat/DATA/MED.mat")
library(R.matlab)
install.packages(rstan)
install.packages("rstan")
library(develop)
library("develop")
install.packages("remotes")
remotes::install_github("HenrikBengtsson/matrixStats", ref="develop")
remotes::install_github("HenrikBengtsson/matrixStats", ref="develop")
# run the next line if you already have rstan installed
# remove.packages(c("StanHeaders", "rstan"))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
remotes::install_github("HenrikBengtsson/matrixStats", ref="develop")
library(coin)
library(coin)
library(rstatix)
# run the next line if you already have rstan installed
# remove.packages(c("StanHeaders", "rstan"))
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install.packages("matrixStats")
install.packages("matrixStats")
library(rstan)
install.packages(rstan)
install.packages("rstan")
install.packages("matrixStats")
install.packages(tidyverse)
install.packages("tidyverse")
install.packages(c("R.matlab","rstatix","readxl","ggpubr","ggsci"))
library(R.matlab)
library(rstatix)
library(tidyverse)
library(readxl)
library(ggpubr)
library(ggsci)
setwd("MYELIN/")
test <- readMat("./DATA/MED.mat")
library(R.matlab)
library(rstatix)
library(tidyverse)
library(readxl)
library(ggpubr)
library(ggsci)
test <- readMat("./DATA/MED.mat")
# test2 <- readMat("./DATA/HighLowBandpassedINT_halfwidth_detrended.mat")
# test2 <- readMat("./DATA/HighLowBandpassedINT_halfwidth_detrended_3.mat")
test2 <- readMat("/home/kaansocat/MYELIN/DATA/DetrendedData.mat")
test2
RegWise <- data.frame(MY = test$MED[,3],
ACW = rowMeans(test2$ACW0.halfwidth.bp.dt),
GS = rowMeans(test2$GSCORR.arr),
G_1 = ifelse(test$MED[,5]=="2","Self","Non-Self") )
test <- readMat("./DATA/MED.mat")
# test2 <- readMat("./DATA/HighLowBandpassedINT_halfwidth_detrended.mat")
# test2 <- readMat("./DATA/HighLowBandpassedINT_halfwidth_detrended_3.mat")
test2 <- readMat("/home/kaansocat/MYELIN/DATA/DetrendedData.mat")
test
RegWise <- data.frame(MY = test$MED[,3],
ACW = rowMeans(test2$ACW0.halfwidth.dt),
GS = rowMeans(test2$GSCORR.arr),
G_1 = ifelse(test$MED[,5]=="2","Self","Non-Self") )
result <- RegWise %>%
wilcox_test(ACW ~ G_1) %>%
add_significance("p")
RegWise %>% wilcox_effsize(ACW ~ G_1)
install.packages("coin")
result <- RegWise %>%
wilcox_test(ACW ~ G_1) %>%
add_significance("p")
result <- result %>% add_xy_position(group ="GS_1",dodge = 0.8)
boxp <- RegWise %>% ggviolin( x = "G_1", y = "ACW", add = "median_iqr",
color = "G_1", palette = "npg", size=2)
boxp_ACW <- boxp + stat_pvalue_manual(
result, label = "{p.signif}", tip.length = 0,size=6,step.increase = 0.05
)  + xlab("") + theme(legend.position = "none") + theme(
text = element_text(size = 10),          # Overall text size
axis.title = element_text(size = 15),    # Axis title size
axis.text = element_text(size = 10),     # Axis text size
legend.title = element_text(size = 16),  # Legend title size
legend.text = element_text(size = 14),   # Legend text size
plot.title = element_text(size = 18),    # Plot title size
)
subjdat<-readMat("./DATA/SUBJ_WISE.mat")
SUBJ_GLOB<-data.frame(subjdat$SUBJ.WISE.GLOBAL)
colnames(SUBJ_GLOB)<-c("ACW","GS","MY")
SUBJ_SELF<-data.frame(subjdat$SUBJ.WISE.SELF)
colnames(SUBJ_SELF)<-c("ACW","GS","MY")
SUBJ_NONSELF<-data.frame(subjdat$SUBJ.WISE.NONSELF)
colnames(SUBJ_NONSELF)<-c("ACW","GS","MY")
data_MY<- data.frame(
SELF = SUBJ_SELF$MY,
NONSELF = SUBJ_NONSELF$MY
)
##
self <- as.logical(test$MED[,5]-1)
data_ACW <- data.frame(
SELF = colMeans(test2$ACW0.halfwidth.bp.dt[self,]) ,
NONSELF = colMeans(test2$ACW0.halfwidth.bp.dt[!self,])
)
##### SUBJ_WISE ###############
subjdat<-readMat("./DATA/SUBJ_WISE.mat")
SUBJ_GLOB<-data.frame(subjdat$SUBJ.WISE.GLOBAL)
colnames(SUBJ_GLOB)<-c("ACW","GS","MY")
SUBJ_SELF<-data.frame(subjdat$SUBJ.WISE.SELF)
colnames(SUBJ_SELF)<-c("ACW","GS","MY")
SUBJ_NONSELF<-data.frame(subjdat$SUBJ.WISE.NONSELF)
colnames(SUBJ_NONSELF)<-c("ACW","GS","MY")
data_MY<- data.frame(
SELF = SUBJ_SELF$MY,
NONSELF = SUBJ_NONSELF$MY
)
##
self <- as.logical(test$MED[,5]-1)
data_ACW <- data.frame(
SELF = colMeans(test2$ACW0.halfwidth.dt[self,]) ,
NONSELF = colMeans(test2$ACW0.halfwidth.dt[!self,])
)
data_GS <- data.frame(
SELF = colMeans(test2$GSCORR.arr[self,]) ,
NONSELF = colMeans(test2$GSCORR.arr[!self,] )
)
### Data for ML ###
DAT <- readxl::read_xlsx("./DATA/DAT.xlsx")
data.frame(
ACW = c(data_ACW$SELF,data_ACW$NONSELF),
GSCORR = c(data_GS$SELF,data_GS$NONSELF),
MY = c(data_MY$SELF,data_MY$NONSELF),
ID = c( c(1:100),c(1:100) ),
GENDER = DAT$GENDER,
CLASS = factor(rep(1:2, each = nrow(data_ACW)),levels = c(1,2))
) %>% write.csv(file = "C:/Users/kaan/Documents/NatComm2023/MYELIN/DATA/SUBJ_BP_DT.csv",
row.names = FALSE)
subjdat<-readMat("./DATA/SUBJ_WISE.mat")
SUBJ_GLOB<-data.frame(subjdat$SUBJ.WISE.GLOBAL)
colnames(SUBJ_GLOB)<-c("ACW","GS","MY")
SUBJ_SELF<-data.frame(subjdat$SUBJ.WISE.SELF)
colnames(SUBJ_SELF)<-c("ACW","GS","MY")
SUBJ_NONSELF<-data.frame(subjdat$SUBJ.WISE.NONSELF)
colnames(SUBJ_NONSELF)<-c("ACW","GS","MY")
data_MY<- data.frame(
SELF = SUBJ_SELF$MY,
NONSELF = SUBJ_NONSELF$MY
)
##
self <- as.logical(test$MED[,5]-1)
data_ACW <- data.frame(
SELF = colMeans(test2$ACW0.halfwidth.dt[self,]) ,
NONSELF = colMeans(test2$ACW0.halfwidth.dt[!self,])
)
data_GS <- data.frame(
SELF = colMeans(test2$GSCORR.arr[self,]) ,
NONSELF = colMeans(test2$GSCORR.arr[!self,] )
)
plot_data <- data.frame(
Subject = rep(seq_len(nrow(data_ACW)), 2),
Group = factor(rep(c("SELF", "NONSELF"), each = nrow(data_ACW)),levels = c("SELF","NONSELF")),
Value = c(data_ACW$SELF, data_ACW$NONSELF)
)
# For reporting
plot_data %>% t_test(formula = Value ~ Group,paired = TRUE)
plot_data %>% cohens_d(formula = Value ~ Group,paired = TRUE)
# Plot the paired observations with lines connecting data points for each subject
PAIR_ACW<- ggplot(plot_data, aes(x = Group, y = Value, color = Group)) +
geom_boxplot(alpha = 0) +  # Hide boxplots for better clarity
geom_point(position = position_jitter(width = 0.2), size = 1) +
labs(title = "SELF>NONSELF",
x = "Group",
y = "ACW",
color = "Subject") +
stat_compare_means(method = "t.test",paired = TRUE,label = "p.signif") +
theme_minimal() +
scale_color_npg() +
geom_line(aes(group = Subject), alpha = 0.7, color = "gray",linewidth=0.9) +
theme(
text = element_text(size = 10),          # Overall text size
axis.title = element_text(size = 14),    # Axis title size
axis.text = element_text(size = 10),     # Axis text size
legend.title = element_text(size = 16),  # Legend title size
legend.text = element_text(size = 14),   # Legend text size
plot.title = element_text(size = 10),    # Plot title size
)
### GS ###
plot_data <- data.frame(
Subject = rep(seq_len(nrow(data_GS)), 2),
Group = factor(rep(c("SELF", "NONSELF"), each = nrow(data_ACW)),levels = c("SELF","NONSELF")),
Value = c(data_GS$SELF, data_GS$NONSELF)
)
# For reporting
plot_data %>% t_test(formula = Value ~ Group,paired = TRUE)
plot_data %>% cohens_d(formula = Value ~ Group,paired = TRUE)
# Plot the paired observations with lines connecting data points for each subject
PAIR_GS<- ggplot(plot_data, aes(x = Group, y = Value, color = Group)) +
geom_boxplot(alpha = 0) +  # Hide boxplots for better clarity
geom_point(position = position_jitter(width = 0.2), size = 1) +
labs(title = "NON-SELF>SELF",
x = "Group",
y = "GSCORR",
color = "Subject") +
stat_compare_means(method = "t.test",paired = TRUE,label = "p.signif") +
theme_minimal()+
scale_color_npg() +
geom_line(aes(group = Subject), alpha = 0.7, color = "gray",linewidth=0.9) +  theme(
text = element_text(size = 10),          # Overall text size
axis.title = element_text(size = 14),    # Axis title size
axis.text = element_text(size = 10),     # Axis text size
legend.title = element_text(size = 16),  # Legend title size
legend.text = element_text(size = 14),   # Legend text size
plot.title = element_text(size = 10),    # Plot title size
)
t.test(data_GS$SELF,data_GS$NONSELF,paired = TRUE)
### Myelin ###
plot_data <- data.frame(
Subject = rep(seq_len(nrow(data_MY)), 2),
Group = factor(rep(c("SELF", "NONSELF"), each = nrow(data_ACW)),levels = c("SELF","NONSELF")),
Value = c(data_MY$SELF, data_MY$NONSELF)
)
# For reporting
plot_data %>% t_test(formula = Value ~ Group,paired = TRUE)
plot_data %>% cohens_d(formula = Value ~ Group,paired = TRUE)
# Plot the paired observations with lines connecting data points for each subject
PAIR_MY<- ggplot(plot_data, aes(x = Group, y = Value, color = Group)) +
geom_boxplot(alpha = 0) +  # Hide boxplots for better clarity
geom_point(position = position_jitter(width = 0.2), size = 1) +
labs(title = "NONSELF>SELF",
x = "Group",
y = "MY",
color = "Subject") +
stat_compare_means(method = "t.test",paired = TRUE,label = "p.signif") +
theme_minimal() +
scale_color_npg() +
geom_line(aes(group = Subject), alpha = 0.7, color = "gray",linewidth=0.9) +  theme(
text = element_text(size = 10),          # Overall text size
axis.title = element_text(size = 14),    # Axis title size
axis.text = element_text(size = 10),     # Axis text size
legend.title = element_text(size = 16),  # Legend title size
legend.text = element_text(size = 14),   # Legend text size
plot.title = element_text(size = 10),    # Plot title size
)
PAIR<-ggarrange(PAIR_MY, PAIR_ACW, PAIR_GS, nrow = 1, common.legend = TRUE)
PAIR <- annotate_figure(PAIR, top = text_grob("Regions are averaged to subjects", color = "black", face = "bold", size = 14))
PAIR
library('matrixStats')
